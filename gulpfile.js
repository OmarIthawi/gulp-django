// Directory that will contain all output generated by the gulp tasks
var ROOT_BUILD_DIR = 'build/';

// Directory that will contain all plain output generated by the gulp tasks
var PLAIN_BUILD_DIR = ROOT_BUILD_DIR + 'plain/';

// Directory that will contain all optimized output generated by the gulp tasks
var OPTIMIZED_BUILD_DIR = ROOT_BUILD_DIR + 'optimized/';

// Require
var _ = require('underscore'),
    os = require("os"),
    fs = require('fs'),
    fse = require('extended-fs'),
    path = require('path'),
    parallel = require("concurrent-transform"),
    pngquant = require('imagemin-pngquant'),
    changed = require("gulp-changed"),
    merge = require('merge-stream'),
    sass = require('gulp-ruby-sass'),
    concat = require('gulp-concat'),
    cache = require('gulp-cache'),
    rename = require('gulp-rename'),
    uglify = require('gulp-uglify'),
    imagemin = require('gulp-imagemin'),
    print = require('gulp-print'),
    notify = require('gulp-notify'),
    gulp = require('gulp');

// Adds simple function to String prototype to check whether a string ends with another string
String.prototype.endsWith = function(suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

// Gets all folders inside a specified directory. This goes only one level down.
function getFolders(dir) {
    return fs.readdirSync(dir)
      .filter(function(file) {
        return fs.statSync(path.join(dir, file)).isDirectory();
      });
}

// Gets all folders inside a specified directory, ending with a specified suffix. This is recursive.
function getFoldersEndingWith(dir, suffix){
    var result = [];
    fse.recurseSync(dir, function(path){
        if(fs.lstatSync(path).isDirectory()){
            if(path.endsWith(suffix)){
                result.push(path)
            }
        }
    });
    return result;
}

// Recursively finds al static files directories given a specified parent directory.
function getStaticFolders(dir){
    return getFoldersEndingWith(dir, '/static');
}

// Recursively finds al 'js' directories given a specified parent directory.
function getJSFolders(dir){
    return getFoldersEndingWith(dir, '/js');
}

// Recursively finds al 'js' directories given a specified parent directory.
function getImgFolders(dir){
    return getFoldersEndingWith(dir, '/img');
}

// Task to optimizes all js
gulp.task('optimize-js', function(){
    var static_folders = getStaticFolders('./');

    var tasks = static_folders.map(function(static_folder) {

        var static_folder_parts = static_folder.split( '/' );
        var app_name = static_folder_parts[static_folder_parts.length - 2];

        var app_js_folders = getJSFolders(static_folder);

        var output_dir = {
            plain: PLAIN_BUILD_DIR + app_name + '/js/',
            optimized: OPTIMIZED_BUILD_DIR + app_name + '/js/'
        };

        var app_tasks = app_js_folders.map(function(app_js_folder) {
            var js_folders = getFolders(app_js_folder);

            var js_tasks = js_folders.map(function(js_folder){

                var output_file = js_folder + '.js';

                console.log(' processing \''+app_js_folder+'/'+js_folder+'\'');

                return gulp.src(path.join(app_js_folder, js_folder, '/*.js'))
                    // Concatenate to all.js
                    .pipe(concat(output_file))

                    // Save plain output in respective destination folder
                    .pipe(gulp.dest(output_dir.plain))

                    // Print filepath
                    .pipe(print(function(filepath) {
                        return "Build Plain: " + filepath;
                    }))

                    // Minify
                    .pipe(parallel(
                        uglify(),
                        os.cpus().length
                    ))

                    // Rename
                    .pipe(rename(output_file))

                    // Save optimized in respective destination folder
                    .pipe(gulp.dest(output_dir.optimized))

                    // Print filepath
                    .pipe(print(function(filepath) {
                        return "Build Optimized: " + filepath;
                    }));
            });
            return merge(js_tasks);
        });
        return merge(app_tasks);
    });
    return merge(tasks);
});

// Task to optimizes all images
gulp.task('optimize-images', function() {
    var static_folders = getStaticFolders('./');

    var tasks = static_folders.map(function(static_folder) {

        var static_folder_parts = static_folder.split( '/' );
        var app_name = static_folder_parts[static_folder_parts.length - 2];

        var app_img_folders = getImgFolders(static_folder);

        var output_dir = {
            optimized: OPTIMIZED_BUILD_DIR + app_name + '/img/'
        };

        var app_tasks = app_img_folders.map(function(app_img_folder) {
            console.log(' processing \''+app_img_folder+'\'');

            return gulp.src(app_img_folder + '/*')
                .pipe(parallel(
                    imagemin({
                        optimizationLevel: 3,
                        progressive: true,
                        interlaced: true
                    }),
                    os.cpus().length
                ))

                .on("error", notify.onError({
                    message: "Error: <%= error.message %>",
                    title: "Could not run imagemin"
                }))

                .pipe(gulp.dest(output_dir.optimized))

                .pipe(print(function(filepath) {
                    return "Build Optimized: " + filepath;
                }));
        });
        return merge(app_tasks);
    });
    return merge(tasks);
});

//gulp.task('test', function () {
//    return gulp.src('core/frontend/static/frontend/img/*.jpg')
//        .pipe(imagemin({
//            progressive: true,
//            svgoPlugins: [{removeViewBox: false}],
//            use: [pngquant()]
//        }))
//        .pipe(gulp.dest('core/frontend/static/frontend/img/dist'));
//});

// todo
gulp.task('compile-sass', function(){
    var static_folders = getStaticFolders('./');

});
